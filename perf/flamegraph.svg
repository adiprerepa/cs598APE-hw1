<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="2400" height="742" onload="init(evt)" viewBox="0 0 2400 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="2400.0" height="742.0" fill="url(#background)"  />
<text id="title" x="1200.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="725" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="2290.00" y="24" >Search</text>
<text id="ignorecase" x="2374.00" y="24" >ic</text>
<text id="matched" x="2290.00" y="725" > </text>
<g id="frames">
<g >
<title>Vector::dot (47,851,626 samples, 0.84%)</title><rect x="1435.0" y="229" width="20.0" height="47.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1437.96" y="255.5" ></text>
</g>
<g >
<title>getLight (960,010,594 samples, 16.86%)</title><rect x="1908.7" y="421" width="401.2" height="47.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1911.69" y="447.5" >getLight</text>
</g>
<g >
<title>all (5,695,263,240 samples, 100%)</title><rect x="10.0" y="661" width="2380.0" height="47.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="687.5" ></text>
</g>
<g >
<title>calcColor (379,675,700 samples, 6.67%)</title><rect x="1415.3" y="373" width="158.6" height="47.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1418.29" y="399.5" >calcColor</text>
</g>
<g >
<title>Vector::Vector (92,569,506 samples, 1.63%)</title><rect x="1752.1" y="229" width="38.7" height="47.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1755.11" y="255.5" >Vec..</text>
</g>
<g >
<title>Ray::Ray (45,848,884 samples, 0.81%)</title><rect x="1830.6" y="325" width="19.1" height="47.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="1833.56" y="351.5" ></text>
</g>
<g >
<title>Vector::dot (93,095,316 samples, 1.63%)</title><rect x="469.4" y="325" width="38.9" height="47.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="472.38" y="351.5" >Vec..</text>
</g>
<g >
<title>[unknown]  (44,333,504 samples, 0.78%)</title><rect x="1396.8" y="373" width="18.5" height="47.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1399.76" y="399.5" ></text>
</g>
<g >
<title>Plane::getIntersection (47,851,626 samples, 0.84%)</title><rect x="1435.0" y="277" width="20.0" height="47.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1437.96" y="303.5" ></text>
</g>
<g >
<title>solveScalers (46,491,586 samples, 0.82%)</title><rect x="1790.8" y="277" width="19.4" height="47.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1793.79" y="303.5" ></text>
</g>
<g >
<title>Vector::dot (48,819,233 samples, 0.86%)</title><rect x="1533.5" y="277" width="20.4" height="47.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1536.54" y="303.5" ></text>
</g>
<g >
<title>Vector::dot (139,909,103 samples, 2.46%)</title><rect x="1693.6" y="277" width="58.5" height="47.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1696.64" y="303.5" >Vector..</text>
</g>
<g >
<title>Vector::operator- (90,004,743 samples, 1.58%)</title><rect x="2118.3" y="325" width="37.6" height="47.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="2121.27" y="351.5" >Vec..</text>
</g>
<g >
<title>do_user_addr_fault (305,517 samples, 0.01%)</title><rect x="10.0" y="373" width="0.1" height="47.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>Vector::operator* (180,891,572 samples, 3.18%)</title><rect x="508.3" y="373" width="75.6" height="47.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="511.29" y="399.5" >Vector::..</text>
</g>
<g >
<title>[unknown] (5,694,955,895 samples, 99.99%)</title><rect x="10.1" y="565" width="2379.9" height="47.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.13" y="591.5" >[unknown]</text>
</g>
<g >
<title>__handle_mm_fault (305,517 samples, 0.01%)</title><rect x="10.0" y="277" width="0.1" height="47.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>getLight (237,208,725 samples, 4.17%)</title><rect x="1474.8" y="325" width="99.1" height="47.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1477.82" y="351.5" >getLight</text>
</g>
<g >
<title>[unknown]  (46,752,264 samples, 0.82%)</title><rect x="772.5" y="421" width="19.5" height="47.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="775.49" y="447.5" ></text>
</g>
<g >
<title>Vector::operator- (47,856,708 samples, 0.84%)</title><rect x="1276.9" y="325" width="20.0" height="47.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1279.91" y="351.5" ></text>
</g>
<g >
<title>Vector::dot (139,352,260 samples, 2.45%)</title><rect x="2155.9" y="325" width="58.2" height="47.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="2158.88" y="351.5" >Vector..</text>
</g>
<g >
<title>Vector::Vector (47,022,705 samples, 0.83%)</title><rect x="583.9" y="325" width="19.6" height="47.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="586.88" y="351.5" ></text>
</g>
<g >
<title>Vector::Vector (88,680,443 samples, 1.56%)</title><rect x="2272.8" y="325" width="37.1" height="47.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="2275.82" y="351.5" >Vec..</text>
</g>
<g >
<title>Sphere::getIntersection (39,036,304 samples, 0.69%)</title><rect x="716.0" y="421" width="16.3" height="47.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="719.00" y="447.5" ></text>
</g>
<g >
<title>Vector::operator+ (47,881,564 samples, 0.84%)</title><rect x="1553.9" y="277" width="20.0" height="47.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1556.94" y="303.5" ></text>
</g>
<g >
<title>Ray::Ray (93,803,319 samples, 1.65%)</title><rect x="2214.1" y="373" width="39.2" height="47.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="2217.12" y="399.5" >Ray..</text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (305,517 samples, 0.01%)</title><rect x="10.0" y="565" width="0.1" height="47.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="13.00" y="591.5" ></text>
</g>
<g >
<title>Vector::operator* (95,615,760 samples, 1.68%)</title><rect x="1849.7" y="325" width="40.0" height="47.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1852.72" y="351.5" >Vec..</text>
</g>
<g >
<title>Plane::getLightIntersection (139,352,260 samples, 2.45%)</title><rect x="2155.9" y="373" width="58.2" height="47.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="2158.88" y="399.5" >Plane:..</text>
</g>
<g >
<title>Sphere::getLightIntersection (46,660,296 samples, 0.82%)</title><rect x="2253.3" y="373" width="19.5" height="47.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="2256.32" y="399.5" ></text>
</g>
<g >
<title>Vector::dot (47,278,340 samples, 0.83%)</title><rect x="732.3" y="421" width="19.8" height="47.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="735.31" y="447.5" ></text>
</g>
<g >
<title>filemap_map_pages (305,517 samples, 0.01%)</title><rect x="10.0" y="85" width="0.1" height="47.0" fill="rgb(229,112,27)" rx="2" ry="2" />
<text  x="13.00" y="111.5" ></text>
</g>
<g >
<title>Vector::operator* (40,758,623 samples, 0.72%)</title><rect x="2101.2" y="325" width="17.1" height="47.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="2104.24" y="351.5" ></text>
</g>
<g >
<title>Box::getIntersection (1,014,420,559 samples, 17.81%)</title><rect x="255.1" y="421" width="423.9" height="47.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="258.11" y="447.5" >Box::getIntersection</text>
</g>
<g >
<title>Vector::normalize (48,870,950 samples, 0.86%)</title><rect x="752.1" y="421" width="20.4" height="47.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="755.07" y="447.5" ></text>
</g>
<g >
<title>Box::getIntersection (95,395,612 samples, 1.67%)</title><rect x="1435.0" y="325" width="39.8" height="47.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1437.96" y="351.5" >Box..</text>
</g>
<g >
<title>getLight (755,521,484 samples, 13.27%)</title><rect x="1573.9" y="373" width="315.8" height="47.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1576.95" y="399.5" >getLight</text>
</g>
<g >
<title>handle_pte_fault (305,517 samples, 0.01%)</title><rect x="10.0" y="229" width="0.1" height="47.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>solveScalers (238,940,967 samples, 4.20%)</title><rect x="1296.9" y="325" width="99.9" height="47.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1299.91" y="351.5" >solveScalers</text>
</g>
<g >
<title>Plane::getIntersection (229,790,402 samples, 4.03%)</title><rect x="1141.2" y="325" width="96.1" height="47.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1144.23" y="351.5" >Plane::getI..</text>
</g>
<g >
<title>solveScalers (47,298,733 samples, 0.83%)</title><rect x="659.3" y="373" width="19.7" height="47.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="662.27" y="399.5" ></text>
</g>
<g >
<title>Ray::Ray (47,147,923 samples, 0.83%)</title><rect x="1513.8" y="277" width="19.7" height="47.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="1516.84" y="303.5" ></text>
</g>
<g >
<title>main.exe (5,695,261,412 samples, 100.00%)</title><rect x="10.0" y="613" width="2380.0" height="47.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="13.00" y="639.5" >main.exe</text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (305,517 samples, 0.01%)</title><rect x="10.0" y="517" width="0.1" height="47.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>Box::getLightIntersection (543,808,667 samples, 9.55%)</title><rect x="1928.6" y="373" width="227.3" height="47.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1931.63" y="399.5" >Box::getLightIntersection</text>
</g>
<g >
<title>Vector::operator- (92,569,506 samples, 1.63%)</title><rect x="1752.1" y="277" width="38.7" height="47.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1755.11" y="303.5" >Vec..</text>
</g>
<g >
<title>Box::getLightIntersection (93,360,005 samples, 1.64%)</title><rect x="1474.8" y="277" width="39.0" height="47.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1477.82" y="303.5" >Box..</text>
</g>
<g >
<title>Vector::operator- (133,369,602 samples, 2.34%)</title><rect x="603.5" y="373" width="55.8" height="47.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="606.53" y="399.5" >Vecto..</text>
</g>
<g >
<title>asm_exc_page_fault (305,517 samples, 0.01%)</title><rect x="10.0" y="469" width="0.1" height="47.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>Vector::dot (93,360,005 samples, 1.64%)</title><rect x="1474.8" y="229" width="39.0" height="47.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1477.82" y="255.5" >Vec..</text>
</g>
<g >
<title>Vector::operator+ (94,888,231 samples, 1.67%)</title><rect x="1237.3" y="325" width="39.6" height="47.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1240.26" y="351.5" >Vec..</text>
</g>
<g >
<title>Vector::Vector (90,004,743 samples, 1.58%)</title><rect x="2118.3" y="277" width="37.6" height="47.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="2121.27" y="303.5" >Vec..</text>
</g>
<g >
<title>Disk::getLightIntersection (48,662,974 samples, 0.85%)</title><rect x="1810.2" y="325" width="20.4" height="47.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1813.22" y="351.5" ></text>
</g>
<g >
<title>exc_page_fault (305,517 samples, 0.01%)</title><rect x="10.0" y="421" width="0.1" height="47.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>Vector::Vector (40,758,623 samples, 0.72%)</title><rect x="2101.2" y="277" width="17.1" height="47.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="2104.24" y="303.5" ></text>
</g>
<g >
<title>insertionSort (191,737,518 samples, 3.37%)</title><rect x="2309.9" y="421" width="80.1" height="47.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="2312.87" y="447.5" >insertion..</text>
</g>
<g >
<title>Vector::dot (364,915,195 samples, 6.41%)</title><rect x="1948.7" y="325" width="152.5" height="47.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1951.74" y="351.5" >Vector::dot</text>
</g>
<g >
<title>Vector::Vector (47,039,456 samples, 0.83%)</title><rect x="1257.3" y="277" width="19.6" height="47.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1260.25" y="303.5" ></text>
</g>
<g >
<title>Plane::getIntersection (371,899,012 samples, 6.53%)</title><rect x="352.9" y="373" width="155.4" height="47.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="355.87" y="399.5" >Plane::getIntersect..</text>
</g>
<g >
<title>Vector::operator+ (47,022,705 samples, 0.83%)</title><rect x="583.9" y="373" width="19.6" height="47.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="586.88" y="399.5" ></text>
</g>
<g >
<title>Vector::Vector (86,473,771 samples, 1.52%)</title><rect x="623.1" y="325" width="36.2" height="47.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="626.13" y="351.5" >Vec..</text>
</g>
<g >
<title>Plane::getIntersection (88,467,662 samples, 1.55%)</title><rect x="679.0" y="421" width="37.0" height="47.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="682.03" y="447.5" >Pla..</text>
</g>
<g >
<title>handle_mm_fault (305,517 samples, 0.01%)</title><rect x="10.0" y="325" width="0.1" height="47.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>do_read_fault (305,517 samples, 0.01%)</title><rect x="10.0" y="133" width="0.1" height="47.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.00" y="159.5" ></text>
</g>
<g >
<title>Vector::operator+ (88,680,443 samples, 1.56%)</title><rect x="2272.8" y="373" width="37.1" height="47.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="2275.82" y="399.5" >Vec..</text>
</g>
<g >
<title>Box::getLightIntersection (418,198,089 samples, 7.34%)</title><rect x="1635.5" y="325" width="174.7" height="47.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1638.46" y="351.5" >Box::getLightIntersect..</text>
</g>
<g >
<title>Vector::Vector (46,986,071 samples, 0.83%)</title><rect x="1870.0" y="277" width="19.7" height="47.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1873.04" y="303.5" ></text>
</g>
<g >
<title>refresh (5,694,955,895 samples, 99.99%)</title><rect x="10.1" y="517" width="2379.9" height="47.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="13.13" y="543.5" >refresh</text>
</g>
<g >
<title>srso_alias_safe_ret (305,517 samples, 0.01%)</title><rect x="10.0" y="37" width="0.1" height="47.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="13.00" y="63.5" ></text>
</g>
<g >
<title>solveScalers (47,543,986 samples, 0.83%)</title><rect x="1455.0" y="277" width="19.8" height="47.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1457.95" y="303.5" ></text>
</g>
<g >
<title>insertionSort (45,511,799 samples, 0.80%)</title><rect x="1889.7" y="373" width="19.0" height="47.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="1892.67" y="399.5" ></text>
</g>
<g >
<title>calcColor (2,672,138,137 samples, 46.92%)</title><rect x="792.0" y="421" width="1116.7" height="47.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="795.03" y="447.5" >calcColor</text>
</g>
<g >
<title>Vector::dot (88,467,662 samples, 1.55%)</title><rect x="679.0" y="373" width="37.0" height="47.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="682.03" y="399.5" >Vec..</text>
</g>
<g >
<title>do_fault (305,517 samples, 0.01%)</title><rect x="10.0" y="181" width="0.1" height="47.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>Box::getIntersection (658,975,877 samples, 11.57%)</title><rect x="1121.4" y="373" width="275.4" height="47.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1124.38" y="399.5" >Box::getIntersection</text>
</g>
<g >
<title>Vector::dot (48,662,974 samples, 0.85%)</title><rect x="1810.2" y="277" width="20.4" height="47.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1813.22" y="303.5" ></text>
</g>
<g >
<title>Vector::operator- (46,660,296 samples, 0.82%)</title><rect x="2253.3" y="325" width="19.5" height="47.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="2256.32" y="351.5" ></text>
</g>
<g >
<title>Vector::dot (181,155,871 samples, 3.18%)</title><rect x="1161.6" y="277" width="75.7" height="47.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1164.55" y="303.5" >Vector::..</text>
</g>
<g >
<title>calcColor (5,653,448,499 samples, 99.27%)</title><rect x="27.5" y="469" width="2362.5" height="47.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="30.47" y="495.5" >calcColor</text>
</g>
<g >
<title>Vector::dot (39,036,304 samples, 0.69%)</title><rect x="716.0" y="373" width="16.3" height="47.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="719.00" y="399.5" ></text>
</g>
</g>
</svg>

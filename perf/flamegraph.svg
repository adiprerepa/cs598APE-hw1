<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="2400" height="694" onload="init(evt)" viewBox="0 0 2400 694" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="2400.0" height="694.0" fill="url(#background)"  />
<text id="title" x="1200.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="677" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="2290.00" y="24" >Search</text>
<text id="ignorecase" x="2374.00" y="24" >ic</text>
<text id="matched" x="2290.00" y="677" > </text>
<g id="frames">
<g >
<title>getLight (1,032,737,708 samples, 19.28%)</title><rect x="1212.9" y="325" width="458.8" height="47.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1215.89" y="351.5" >getLight</text>
</g>
<g >
<title>Vector::dot (229,905,557 samples, 4.29%)</title><rect x="1318.2" y="229" width="102.1" height="47.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1321.20" y="255.5" >Vector::dot</text>
</g>
<g >
<title>Vector::operator* (93,442,640 samples, 1.74%)</title><rect x="2204.4" y="325" width="41.5" height="47.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="2207.41" y="351.5" >Vec..</text>
</g>
<g >
<title>Box::getLightIntersection (561,401,209 samples, 10.48%)</title><rect x="1212.9" y="277" width="249.4" height="47.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1215.89" y="303.5" >Box::getLightIntersection</text>
</g>
<g >
<title>Vector::operator* (42,744,588 samples, 0.80%)</title><rect x="1172.8" y="229" width="19.0" height="47.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1175.82" y="255.5" ></text>
</g>
<g >
<title>Vector::operator+ (142,534,559 samples, 2.66%)</title><rect x="1608.4" y="277" width="63.3" height="47.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1611.39" y="303.5" >Vector..</text>
</g>
<g >
<title>Plane::solveScalers (141,759,415 samples, 2.65%)</title><rect x="1255.2" y="229" width="63.0" height="47.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="1258.22" y="255.5" >Plane:..</text>
</g>
<g >
<title>Vector::operator+ (46,772,330 samples, 0.87%)</title><rect x="1420.3" y="229" width="20.8" height="47.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1423.34" y="255.5" ></text>
</g>
<g >
<title>Vector::operator+ (137,855,343 samples, 2.57%)</title><rect x="2245.9" y="325" width="61.3" height="47.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="2248.92" y="351.5" >Vector..</text>
</g>
<g >
<title>Vector::operator+ (42,105,465 samples, 0.79%)</title><rect x="1030.3" y="325" width="18.7" height="47.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1033.28" y="351.5" ></text>
</g>
<g >
<title>do_fault (304,877 samples, 0.01%)</title><rect x="10.0" y="133" width="0.1" height="47.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="13.00" y="159.5" ></text>
</g>
<g >
<title>Vector::Vector (96,598,763 samples, 1.80%)</title><rect x="2264.3" y="277" width="42.9" height="47.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="2267.25" y="303.5" >Vect..</text>
</g>
<g >
<title>Vector::dot (46,497,867 samples, 0.87%)</title><rect x="347.4" y="277" width="20.6" height="47.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="350.39" y="303.5" ></text>
</g>
<g >
<title>getLight (1,430,261,460 samples, 26.70%)</title><rect x="1671.7" y="373" width="635.5" height="47.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1674.72" y="399.5" >getLight</text>
</g>
<g >
<title>calcColor (274,310,041 samples, 5.12%)</title><rect x="1069.9" y="325" width="121.9" height="47.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1072.94" y="351.5" >calcColor</text>
</g>
<g >
<title>Vector::Vector (46,865,076 samples, 0.87%)</title><rect x="474.1" y="277" width="20.9" height="47.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="477.13" y="303.5" ></text>
</g>
<g >
<title>Vector::operator* (47,801,459 samples, 0.89%)</title><rect x="2062.5" y="277" width="21.2" height="47.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="2065.50" y="303.5" ></text>
</g>
<g >
<title>Vector::Vector (136,864,756 samples, 2.55%)</title><rect x="2103.0" y="229" width="60.8" height="47.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="2106.01" y="255.5" >Vector..</text>
</g>
<g >
<title>Box::getLightIntersection (44,220,779 samples, 0.83%)</title><rect x="1153.2" y="229" width="19.6" height="47.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1156.18" y="255.5" ></text>
</g>
<g >
<title>Vector::dot (45,244,203 samples, 0.84%)</title><rect x="991.1" y="325" width="20.1" height="47.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="994.07" y="351.5" ></text>
</g>
<g >
<title>Box::getIntersection (230,631,818 samples, 4.31%)</title><rect x="869.3" y="325" width="102.5" height="47.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="872.31" y="351.5" >Box::getInte..</text>
</g>
<g >
<title>Plane::solveScalers (48,802,782 samples, 0.91%)</title><rect x="537.2" y="325" width="21.7" height="47.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="540.24" y="351.5" >P..</text>
</g>
<g >
<title>Vector::mag (42,999,486 samples, 0.80%)</title><rect x="1011.2" y="277" width="19.1" height="47.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="1014.17" y="303.5" ></text>
</g>
<g >
<title>[unknown]  (304,877 samples, 0.01%)</title><rect x="10.0" y="469" width="0.1" height="47.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>[unknown]  (47,170,623 samples, 0.88%)</title><rect x="1049.0" y="325" width="20.9" height="47.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1051.98" y="351.5" ></text>
</g>
<g >
<title>Box::getIntersection (625,895,979 samples, 11.68%)</title><rect x="259.2" y="373" width="278.0" height="47.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="262.17" y="399.5" >Box::getIntersection</text>
</g>
<g >
<title>Vector::Vector (48,266,074 samples, 0.90%)</title><rect x="411.2" y="325" width="21.5" height="47.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="414.21" y="351.5" >V..</text>
</g>
<g >
<title>Vector::Vector (47,025,965 samples, 0.88%)</title><rect x="950.9" y="229" width="20.9" height="47.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="953.89" y="255.5" ></text>
</g>
<g >
<title>handle_pte_fault (304,877 samples, 0.01%)</title><rect x="10.0" y="181" width="0.1" height="47.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>Ray::Ray (91,363,099 samples, 1.71%)</title><rect x="2163.8" y="325" width="40.6" height="47.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="2166.82" y="351.5" >Ray..</text>
</g>
<g >
<title>Vector::operator* (140,215,316 samples, 2.62%)</title><rect x="432.7" y="325" width="62.3" height="47.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="435.66" y="351.5" >Vector..</text>
</g>
<g >
<title>[unknown] (5,356,553,687 samples, 99.99%)</title><rect x="10.1" y="517" width="2379.9" height="47.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.14" y="543.5" >[unknown]</text>
</g>
<g >
<title>Vector::Vector (48,349,200 samples, 0.90%)</title><rect x="389.7" y="277" width="21.5" height="47.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="392.73" y="303.5" >V..</text>
</g>
<g >
<title>Vector::operator- (48,292,697 samples, 0.90%)</title><rect x="515.8" y="325" width="21.4" height="47.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="518.79" y="351.5" >V..</text>
</g>
<g >
<title>refresh (5,356,553,687 samples, 99.99%)</title><rect x="10.1" y="469" width="2379.9" height="47.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="13.14" y="495.5" >refresh</text>
</g>
<g >
<title>Vector::Vector (46,899,537 samples, 0.88%)</title><rect x="495.0" y="277" width="20.8" height="47.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="497.95" y="303.5" ></text>
</g>
<g >
<title>Vector::operator- (47,025,965 samples, 0.88%)</title><rect x="950.9" y="277" width="20.9" height="47.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="953.89" y="303.5" ></text>
</g>
<g >
<title>finish_fault (304,877 samples, 0.01%)</title><rect x="10.0" y="85" width="0.1" height="47.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="13.00" y="111.5" ></text>
</g>
<g >
<title>Plane::getColor (48,802,782 samples, 0.91%)</title><rect x="537.2" y="373" width="21.7" height="47.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="540.24" y="399.5" >P..</text>
</g>
<g >
<title>calcColor (5,310,233,973 samples, 99.13%)</title><rect x="30.7" y="421" width="2359.3" height="47.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="33.71" y="447.5" >calcColor</text>
</g>
<g >
<title>all (5,356,860,405 samples, 100%)</title><rect x="10.0" y="613" width="2380.0" height="47.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>Vector::dot (44,220,779 samples, 0.83%)</title><rect x="1153.2" y="181" width="19.6" height="47.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1156.18" y="207.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (304,877 samples, 0.01%)</title><rect x="10.0" y="421" width="0.1" height="47.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>Ray::Ray (90,373,884 samples, 1.69%)</title><rect x="1462.3" y="277" width="40.2" height="47.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="1465.31" y="303.5" >Ray..</text>
</g>
<g >
<title>set_pte_range (304,877 samples, 0.01%)</title><rect x="10.0" y="37" width="0.1" height="47.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="13.00" y="63.5" ></text>
</g>
<g >
<title>getLight (86,965,367 samples, 1.62%)</title><rect x="1153.2" y="277" width="38.6" height="47.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1156.18" y="303.5" >get..</text>
</g>
<g >
<title>Plane::solveScalers (97,147,015 samples, 1.81%)</title><rect x="368.0" y="325" width="43.2" height="47.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="371.05" y="351.5" >Plan..</text>
</g>
<g >
<title>[unknown]  (48,597,558 samples, 0.91%)</title><rect x="1131.6" y="277" width="21.6" height="47.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1134.59" y="303.5" >[..</text>
</g>
<g >
<title>ImageTexture::getColor (43,417,802 samples, 0.81%)</title><rect x="971.8" y="325" width="19.3" height="47.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="974.78" y="351.5" ></text>
</g>
<g >
<title>Vector::Vector (47,690,598 samples, 0.89%)</title><rect x="1441.1" y="181" width="21.2" height="47.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1444.12" y="207.5" ></text>
</g>
<g >
<title>Vector::operator+ (46,899,537 samples, 0.88%)</title><rect x="495.0" y="325" width="20.8" height="47.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="497.95" y="351.5" ></text>
</g>
<g >
<title>fix (47,428,227 samples, 0.89%)</title><rect x="1191.8" y="325" width="21.1" height="47.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1194.81" y="351.5" ></text>
</g>
<g >
<title>Vector::dot (48,221,354 samples, 0.90%)</title><rect x="1502.5" y="229" width="21.4" height="47.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1505.46" y="255.5" >V..</text>
</g>
<g >
<title>Vector::dot (416,387,198 samples, 7.77%)</title><rect x="1877.5" y="277" width="185.0" height="47.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1880.51" y="303.5" >Vector::dot</text>
</g>
<g >
<title>Box::getLightIntersection (829,258,674 samples, 15.48%)</title><rect x="1795.4" y="325" width="368.4" height="47.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1798.39" y="351.5" >Box::getLightIntersection</text>
</g>
<g >
<title>Vector::operator- (136,864,756 samples, 2.55%)</title><rect x="2103.0" y="277" width="60.8" height="47.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="2106.01" y="303.5" >Vector..</text>
</g>
<g >
<title>Sphere::getLightIntersection (48,221,354 samples, 0.90%)</title><rect x="1502.5" y="277" width="21.4" height="47.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1505.46" y="303.5" >S..</text>
</g>
<g >
<title>[unknown]  (304,877 samples, 0.01%)</title><rect x="10.0" y="517" width="0.1" height="47.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>Vector::operator+ (43,368,778 samples, 0.81%)</title><rect x="2083.7" y="277" width="19.3" height="47.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="2086.74" y="303.5" ></text>
</g>
<g >
<title>main.exe (5,356,858,564 samples, 100.00%)</title><rect x="10.0" y="565" width="2380.0" height="47.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="13.00" y="591.5" >main.exe</text>
</g>
<g >
<title>Plane::getIntersection (46,497,867 samples, 0.87%)</title><rect x="347.4" y="325" width="20.6" height="47.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="350.39" y="351.5" ></text>
</g>
<g >
<title>Vector::operator- (47,690,598 samples, 0.89%)</title><rect x="1441.1" y="229" width="21.2" height="47.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1444.12" y="255.5" ></text>
</g>
<g >
<title>[unknown]  (46,644,475 samples, 0.87%)</title><rect x="622.3" y="325" width="20.8" height="47.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="625.33" y="351.5" ></text>
</g>
<g >
<title>Vector::operator* (190,206,702 samples, 3.55%)</title><rect x="1523.9" y="277" width="84.5" height="47.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1526.89" y="303.5" >Vector::o..</text>
</g>
<g >
<title>Vector::dot (48,701,406 samples, 0.91%)</title><rect x="929.3" y="229" width="21.6" height="47.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="932.25" y="255.5" >V..</text>
</g>
<g >
<title>Vector::Vector (46,319,714 samples, 0.86%)</title><rect x="10.1" y="421" width="20.6" height="47.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.14" y="447.5" ></text>
</g>
<g >
<title>handle_mm_fault (304,877 samples, 0.01%)</title><rect x="10.0" y="277" width="0.1" height="47.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>Plane::getIntersection (95,734,715 samples, 1.79%)</title><rect x="908.4" y="277" width="42.5" height="47.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="911.35" y="303.5" >Plan..</text>
</g>
<g >
<title>[unknown]  (189,343,045 samples, 3.53%)</title><rect x="558.9" y="373" width="84.2" height="47.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="561.93" y="399.5" >[unknown] </text>
</g>
<g >
<title>calcColor (2,315,313,859 samples, 43.22%)</title><rect x="643.1" y="373" width="1028.6" height="47.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="646.05" y="399.5" >calcColor</text>
</g>
<g >
<title>exc_page_fault (304,877 samples, 0.01%)</title><rect x="10.0" y="373" width="0.1" height="47.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>__handle_mm_fault (304,877 samples, 0.01%)</title><rect x="10.0" y="229" width="0.1" height="47.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>[unknown]  (47,170,623 samples, 0.88%)</title><rect x="1049.0" y="277" width="20.9" height="47.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1051.98" y="303.5" ></text>
</g>
<g >
<title>Vector::Vector (95,300,543 samples, 1.78%)</title><rect x="1629.4" y="229" width="42.3" height="47.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1632.38" y="255.5" >Vec..</text>
</g>
<g >
<title>do_user_addr_fault (304,877 samples, 0.01%)</title><rect x="10.0" y="325" width="0.1" height="47.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>Vector::normalize (42,999,486 samples, 0.80%)</title><rect x="1011.2" y="325" width="19.1" height="47.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1014.17" y="351.5" ></text>
</g>
<g >
<title>insertionSort (186,424,798 samples, 3.48%)</title><rect x="2307.2" y="373" width="82.8" height="47.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="2310.17" y="399.5" >insertion..</text>
</g>
</g>
</svg>

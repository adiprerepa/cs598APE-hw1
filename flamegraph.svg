<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="2400" height="1030" onload="init(evt)" viewBox="0 0 2400 1030" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="2400.0" height="1030.0" fill="url(#background)"  />
<text id="title" x="1200.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="1013" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="2290.00" y="24" >Search</text>
<text id="ignorecase" x="2374.00" y="24" >ic</text>
<text id="matched" x="2290.00" y="1013" > </text>
<g id="frames">
<g >
<title>Vector::dot (196,745,646 samples, 3.95%)</title><rect x="1943.3" y="613" width="94.0" height="47.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1946.31" y="639.5" >Vector::dot</text>
</g>
<g >
<title>Vector::Vector (47,755,360 samples, 0.96%)</title><rect x="164.1" y="661" width="22.9" height="47.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="167.14" y="687.5" >V..</text>
</g>
<g >
<title>calcColor (1,980,689,028 samples, 39.76%)</title><rect x="906.7" y="709" width="946.2" height="47.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="909.71" y="735.5" >calcColor</text>
</g>
<g >
<title>Plane::getIntersection (49,116,667 samples, 0.99%)</title><rect x="1369.1" y="613" width="23.4" height="47.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1372.07" y="639.5" >P..</text>
</g>
<g >
<title>Plane::getLightIntersection (47,048,510 samples, 0.94%)</title><rect x="2101.5" y="661" width="22.5" height="47.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="2104.53" y="687.5" >P..</text>
</g>
<g >
<title>Vector::dot (90,183,770 samples, 1.81%)</title><rect x="2213.8" y="661" width="43.1" height="47.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="2216.85" y="687.5" >Vect..</text>
</g>
<g >
<title>Box::getIntersection (181,988,630 samples, 3.65%)</title><rect x="1282.1" y="613" width="87.0" height="47.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1285.13" y="639.5" >Box::getIn..</text>
</g>
<g >
<title>Vector::Vector (48,837,643 samples, 0.98%)</title><rect x="210.4" y="613" width="23.3" height="47.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="213.41" y="639.5" >V..</text>
</g>
<g >
<title>Vector::Vector (48,797,775 samples, 0.98%)</title><rect x="1737.6" y="517" width="23.3" height="47.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1740.59" y="543.5" >V..</text>
</g>
<g >
<title>main.exe (4,982,118,540 samples, 100.00%)</title><rect x="10.0" y="901" width="2380.0" height="47.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="13.00" y="927.5" >main.exe</text>
</g>
<g >
<title>solveScalers (46,915,383 samples, 0.94%)</title><rect x="2079.1" y="613" width="22.4" height="47.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="2082.12" y="639.5" >s..</text>
</g>
<g >
<title>Vector::operator* (41,771,806 samples, 0.84%)</title><rect x="2037.3" y="613" width="20.0" height="47.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="2040.30" y="639.5" ></text>
</g>
<g >
<title>map_vdso (311,734 samples, 0.01%)</title><rect x="10.0" y="277" width="0.1" height="47.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (311,734 samples, 0.01%)</title><rect x="10.0" y="805" width="0.1" height="47.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.00" y="831.5" ></text>
</g>
<g >
<title>Vector::operator- (48,127,600 samples, 0.97%)</title><rect x="1414.3" y="565" width="23.0" height="47.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1417.34" y="591.5" >V..</text>
</g>
<g >
<title>operator* (47,115,324 samples, 0.95%)</title><rect x="1830.4" y="661" width="22.5" height="47.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1833.40" y="687.5" >o..</text>
</g>
<g >
<title>Plane::getIntersection (142,575,352 samples, 2.86%)</title><rect x="906.7" y="613" width="68.1" height="47.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="909.71" y="639.5" >Plane::..</text>
</g>
<g >
<title>Vector::Vector (41,771,806 samples, 0.84%)</title><rect x="2037.3" y="565" width="20.0" height="47.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="2040.30" y="591.5" ></text>
</g>
<g >
<title>Vector::Vector (41,403,883 samples, 0.83%)</title><rect x="974.8" y="613" width="19.8" height="47.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="977.82" y="639.5" ></text>
</g>
<g >
<title>Vector::operator+ (49,113,279 samples, 0.99%)</title><rect x="1322.4" y="565" width="23.5" height="47.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1325.40" y="591.5" >V..</text>
</g>
<g >
<title>vma_link (311,734 samples, 0.01%)</title><rect x="10.0" y="85" width="0.1" height="47.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="13.00" y="111.5" ></text>
</g>
<g >
<title>Box::getIntersection (1,312,504,377 samples, 26.34%)</title><rect x="76.5" y="709" width="627.0" height="47.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="79.51" y="735.5" >Box::getIntersection</text>
</g>
<g >
<title>Plane::getIntersection (183,437,529 samples, 3.68%)</title><rect x="76.5" y="661" width="87.6" height="47.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="79.51" y="687.5" >Plane::get..</text>
</g>
<g >
<title>Disk::getIntersection (93,415,109 samples, 1.88%)</title><rect x="703.5" y="709" width="44.6" height="47.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="706.50" y="735.5" >Disk..</text>
</g>
<g >
<title>Sphere::getLightIntersection (49,108,054 samples, 0.99%)</title><rect x="1784.3" y="613" width="23.5" height="47.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1787.30" y="639.5" >S..</text>
</g>
<g >
<title>insertionSort (93,889,905 samples, 1.88%)</title><rect x="2345.1" y="709" width="44.9" height="47.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="2348.15" y="735.5" >inse..</text>
</g>
<g >
<title>Vector::Vector (45,780,213 samples, 0.92%)</title><rect x="2057.3" y="565" width="21.8" height="47.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="2060.25" y="591.5" >V..</text>
</g>
<g >
<title>Vector::operator- (48,422,667 samples, 0.97%)</title><rect x="703.5" y="661" width="23.1" height="47.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="706.50" y="687.5" >V..</text>
</g>
<g >
<title>do_syscall_64 (311,734 samples, 0.01%)</title><rect x="10.0" y="757" width="0.1" height="47.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="13.00" y="783.5" ></text>
</g>
<g >
<title>calcColor (324,880,744 samples, 6.52%)</title><rect x="1282.1" y="661" width="155.2" height="47.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1285.13" y="687.5" >calcColor</text>
</g>
<g >
<title>__x64_sys_execve (311,734 samples, 0.01%)</title><rect x="10.0" y="661" width="0.1" height="47.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="13.00" y="687.5" ></text>
</g>
<g >
<title>exec_binprm (311,734 samples, 0.01%)</title><rect x="10.0" y="469" width="0.1" height="47.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>Vector::operator- (146,710,096 samples, 2.94%)</title><rect x="408.9" y="661" width="70.1" height="47.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="411.92" y="687.5" >Vector:..</text>
</g>
<g >
<title>Vector::mag2 (94,266,136 samples, 1.89%)</title><rect x="814.9" y="661" width="45.0" height="47.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="817.85" y="687.5" >Vect..</text>
</g>
<g >
<title>Plane::getColor (44,590,376 samples, 0.90%)</title><rect x="748.1" y="709" width="21.3" height="47.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="751.13" y="735.5" >P..</text>
</g>
<g >
<title>Vector::dot (45,647,847 samples, 0.92%)</title><rect x="1392.5" y="517" width="21.8" height="47.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1395.53" y="543.5" >V..</text>
</g>
<g >
<title>getLight (1,030,423,023 samples, 20.68%)</title><rect x="1852.9" y="709" width="492.2" height="47.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1855.91" y="735.5" >getLight</text>
</g>
<g >
<title>getLight (822,818,487 samples, 16.52%)</title><rect x="1437.3" y="661" width="393.1" height="47.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1440.33" y="687.5" >getLight</text>
</g>
<g >
<title>Plane::getIntersection (49,045,439 samples, 0.98%)</title><rect x="1258.7" y="661" width="23.4" height="47.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1261.70" y="687.5" >P..</text>
</g>
<g >
<title>Vector::operator* (49,120,980 samples, 0.99%)</title><rect x="859.9" y="709" width="23.4" height="47.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="862.88" y="735.5" >V..</text>
</g>
<g >
<title>refresh (4,981,806,806 samples, 99.99%)</title><rect x="10.1" y="805" width="2379.9" height="47.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="13.15" y="831.5" >refresh</text>
</g>
<g >
<title>Vector::dot (49,045,439 samples, 0.98%)</title><rect x="1258.7" y="613" width="23.4" height="47.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1261.70" y="639.5" >V..</text>
</g>
<g >
<title>bprm_execve.part.0 (311,734 samples, 0.01%)</title><rect x="10.0" y="517" width="0.1" height="47.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>insert_vm_struct (311,734 samples, 0.01%)</title><rect x="10.0" y="133" width="0.1" height="47.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="13.00" y="159.5" ></text>
</g>
<g >
<title>Ray::Ray (48,978,807 samples, 0.98%)</title><rect x="1760.9" y="613" width="23.4" height="47.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="1763.90" y="639.5" >R..</text>
</g>
<g >
<title>all (4,982,120,392 samples, 100%)</title><rect x="10.0" y="949" width="2380.0" height="47.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="975.5" ></text>
</g>
<g >
<title>Vector::Vector (48,127,600 samples, 0.97%)</title><rect x="1414.3" y="517" width="23.0" height="47.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1417.34" y="543.5" >V..</text>
</g>
<g >
<title>up_write (311,734 samples, 0.01%)</title><rect x="10.0" y="37" width="0.1" height="47.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="13.00" y="63.5" ></text>
</g>
<g >
<title>Box::getLightIntersection (427,988,669 samples, 8.59%)</title><rect x="1897.1" y="661" width="204.4" height="47.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1900.08" y="687.5" >Box::getLightIntersection</text>
</g>
<g >
<title>Ray::Ray (188,068,071 samples, 3.77%)</title><rect x="2124.0" y="661" width="89.8" height="47.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="2127.01" y="687.5" >Ray::Ray</text>
</g>
<g >
<title>Vector::operator+ (366,702,864 samples, 7.36%)</title><rect x="233.7" y="661" width="175.2" height="47.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="236.74" y="687.5" >Vector::operator+</text>
</g>
<g >
<title>solveScalers (469,945,265 samples, 9.43%)</title><rect x="479.0" y="661" width="224.5" height="47.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="482.00" y="687.5" >solveScalers</text>
</g>
<g >
<title>calcColor (4,933,271,555 samples, 99.02%)</title><rect x="33.3" y="757" width="2356.7" height="47.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="36.33" y="783.5" >calcColor</text>
</g>
<g >
<title>Sphere::getIntersection (94,266,136 samples, 1.89%)</title><rect x="814.9" y="709" width="45.0" height="47.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="817.85" y="735.5" >Sphe..</text>
</g>
<g >
<title>x64_sys_call (311,734 samples, 0.01%)</title><rect x="10.0" y="709" width="0.1" height="47.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="13.00" y="735.5" ></text>
</g>
<g >
<title>Vector::Vector (48,911,489 samples, 0.98%)</title><rect x="883.3" y="661" width="23.4" height="47.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="886.35" y="687.5" >V..</text>
</g>
<g >
<title>Vector::operator* (184,665,331 samples, 3.71%)</title><rect x="2256.9" y="661" width="88.2" height="47.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="2259.93" y="687.5" >Vector::op..</text>
</g>
<g >
<title>solveScalers (44,992,442 samples, 0.90%)</title><rect x="726.6" y="661" width="21.5" height="47.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="729.63" y="687.5" >s..</text>
</g>
<g >
<title>Vector::dot (193,461,156 samples, 3.88%)</title><rect x="1579.4" y="565" width="92.5" height="47.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1582.43" y="591.5" >Vector::dot</text>
</g>
<g >
<title>[unknown] (4,982,118,540 samples, 100.00%)</title><rect x="10.0" y="853" width="2380.0" height="47.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="879.5" >[unknown]</text>
</g>
<g >
<title>Vector::Vector (49,120,980 samples, 0.99%)</title><rect x="859.9" y="661" width="23.4" height="47.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="862.88" y="687.5" >V..</text>
</g>
<g >
<title>Vector::operator- (83,464,950 samples, 1.68%)</title><rect x="1195.4" y="613" width="39.9" height="47.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1198.40" y="639.5" >Vec..</text>
</g>
<g >
<title>load_elf_binary (311,734 samples, 0.01%)</title><rect x="10.0" y="373" width="0.1" height="47.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>Vector::Vector (125,938,928 samples, 2.53%)</title><rect x="348.8" y="613" width="60.1" height="47.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="351.76" y="639.5" >Vector..</text>
</g>
<g >
<title>Vector::operator- (44,590,376 samples, 0.90%)</title><rect x="748.1" y="661" width="21.3" height="47.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="751.13" y="687.5" >V..</text>
</g>
<g >
<title>solveScalers (48,588,975 samples, 0.98%)</title><rect x="1345.9" y="565" width="23.2" height="47.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1348.86" y="591.5" >s..</text>
</g>
<g >
<title>__install_special_mapping (311,734 samples, 0.01%)</title><rect x="10.0" y="181" width="0.1" height="47.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (311,734 samples, 0.01%)</title><rect x="10.0" y="613" width="0.1" height="47.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>Box::getLightIntersection (628,221,337 samples, 12.61%)</title><rect x="1460.8" y="613" width="300.1" height="47.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1463.80" y="639.5" >Box::getLightIntersection</text>
</g>
<g >
<title>Vector::Vector (48,445,996 samples, 0.97%)</title><rect x="455.9" y="613" width="23.1" height="47.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="458.86" y="639.5" >V..</text>
</g>
<g >
<title>Box::getIntersection (736,829,034 samples, 14.79%)</title><rect x="906.7" y="661" width="352.0" height="47.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="909.71" y="687.5" >Box::getIntersection</text>
</g>
<g >
<title>Vector::operator- (45,780,213 samples, 0.92%)</title><rect x="2057.3" y="613" width="21.8" height="47.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="2060.25" y="639.5" >V..</text>
</g>
<g >
<title>_install_special_mapping (311,734 samples, 0.01%)</title><rect x="10.0" y="229" width="0.1" height="47.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>arch_setup_additional_pages (311,734 samples, 0.01%)</title><rect x="10.0" y="325" width="0.1" height="47.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>Vector::operator* (96,984,151 samples, 1.95%)</title><rect x="1671.9" y="565" width="46.3" height="47.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1674.85" y="591.5" >Vect..</text>
</g>
<g >
<title>Vector::Vector (47,862,119 samples, 0.96%)</title><rect x="1695.3" y="517" width="22.9" height="47.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1698.32" y="543.5" >V..</text>
</g>
<g >
<title>solveScalers (49,059,117 samples, 0.98%)</title><rect x="1235.3" y="613" width="23.4" height="47.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1238.27" y="639.5" >s..</text>
</g>
<g >
<title>Box::getLightIntersection (45,647,847 samples, 0.92%)</title><rect x="1392.5" y="565" width="21.8" height="47.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1395.53" y="591.5" >B..</text>
</g>
<g >
<title>getLight (93,775,447 samples, 1.88%)</title><rect x="1392.5" y="613" width="44.8" height="47.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1395.53" y="639.5" >getL..</text>
</g>
<g >
<title>search_binary_handler (311,734 samples, 0.01%)</title><rect x="10.0" y="421" width="0.1" height="47.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>Vector::operator* (97,953,263 samples, 1.97%)</title><rect x="187.0" y="661" width="46.7" height="47.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="189.95" y="687.5" >Vect..</text>
</g>
<g >
<title>Vector::dot (42,220,332 samples, 0.85%)</title><rect x="1302.2" y="517" width="20.2" height="47.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1305.23" y="543.5" ></text>
</g>
<g >
<title>Vector::operator+ (420,325,732 samples, 8.44%)</title><rect x="994.6" y="613" width="200.8" height="47.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="997.60" y="639.5" >Vector::operator+</text>
</g>
<g >
<title>Vector::operator- (89,430,269 samples, 1.80%)</title><rect x="1718.2" y="565" width="42.7" height="47.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1721.18" y="591.5" >Vect..</text>
</g>
<g >
<title>bprm_execve (311,734 samples, 0.01%)</title><rect x="10.0" y="565" width="0.1" height="47.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="13.00" y="591.5" ></text>
</g>
<g >
<title>Plane::getIntersection (95,086,123 samples, 1.91%)</title><rect x="769.4" y="709" width="45.5" height="47.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="772.43" y="735.5" >Plan..</text>
</g>
<g >
<title>Vector::operator+ (48,911,489 samples, 0.98%)</title><rect x="883.3" y="709" width="23.4" height="47.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="886.35" y="735.5" >V..</text>
</g>
<g >
<title>Plane::getIntersection (84,286,376 samples, 1.69%)</title><rect x="1282.1" y="565" width="40.3" height="47.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1285.13" y="591.5" >Pla..</text>
</g>
<g >
<title>Vector::operator* (47,389,903 samples, 0.95%)</title><rect x="1807.8" y="613" width="22.6" height="47.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1810.76" y="639.5" >V..</text>
</g>
</g>
</svg>
